link : https://www.codingninjas.com/codestudio/problems/painter-s-partition-problem_1089557

PROBLEM STATEMENT
Given an array/list of length ‘N’, where the array/list represents the boards and each element of the given array/list represents the length of each board. 
Some ‘K’ numbers of painters are available to paint these boards. Consider that each unit of a board takes 1 unit of time to paint.

You are supposed to return the area of the minimum time to get this job done of painting all the ‘N’ boards under a constraint that any painter will only 
paint the continuous sections of boards.

Sample Input 1 :
2   (test case)
4 2
5 5 5 5
4 2
10 20 30 40
Sample Output 1 :
10
60

---------------------------------------------------------

bool isPossible(vector<int> &boards, int n, int k, int mid)
{
    int painterCount=1;
    int boardSum=0;
    
    for(int i=0; i<n; i++)
    {
        if(boardSum+boards[i] <= mid )
            boardSum+=boards[i];
        else
        {
            painterCount++;
            if(painterCount > k || boards[i] > mid )
                return false;
            
            boardSum=boards[i];
        }       
    }
    return true;
}

int findLargestMinDistance(vector<int> &boards, int k)
{
    //    Write your code here.
    int n = boards.size();
    int s=0,e=0,ans=-1;
    for(int i=0; i<n; i++)
        e+=boards[i];
    
    int mid= s+(e-s)/2;
    
    while(s<=e)
    {
        if( isPossible(boards,n,k,mid) )
        {
            ans=mid;
            e = mid-1;
        }            
        else
            s= mid+1;
        
        mid = s+(e-s)/2;
    }
    return ans;
}
